# Copyright 2024 CS Group
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

gateway:
  imagePullSecrets:
    - name: ghcr-k8s
  replicas: 1
  prefix: /
  loglevel: INFO
  image:
    name: ghcr.io/dask/dask-gateway-server
    tag: "2024.1.0"
    pullPolicy:
  auth:
    type: jupyterhub
    jupyterhub:
      apiToken: {{ jupyterhub.services.daskgateway.apitoken }}
      apiUrl: {{ jupyterhub.services.daskgateway.apiurl }}
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: "node-role.kubernetes.io/processing"
              operator: Exists
  tolerations:
    - key: role
      operator: Equal
      value: processing
      effect: NoSchedule
  extraConfig:
    clusteroptions: |
        from dask_gateway_server.options import Options, Integer, Float, String, Mapping

        def option_handler(options):
            return {
                "scheduler_core_limit": options.scheduler_core_limit,
                "scheduler_memory_limit": "%fG" % options.scheduler_memory_limit,
                "worker_cores": options.worker_cores,
                "worker_memory": "%fG" % options.worker_memory,
                "image": options.image,
                "namespace": options.namespace,
                "cluster_max_cores": options.cluster_max_cores,
                "cluster_max_memory": options.cluster_max_memory,
                "cluster_max_workers": options.cluster_max_workers,
                "cluster_name": options.cluster_name,
                "scheduler_extra_container_config": options.scheduler_extra_container_config,
                "scheduler_extra_pod_annotations": options.scheduler_extra_pod_annotations,
                "scheduler_extra_pod_labels": options.scheduler_extra_pod_labels,
                "environment": options.environment,
                "worker_extra_pod_config": options.worker_extra_pod_config,
                "worker_extra_container_config": options.worker_extra_container_config,
            }

        c.Backend.cluster_options = Options(
            Float("scheduler_core_limit", 1, min=1, max=2, label="Scheduler Max Cores"),
            Float("scheduler_memory_limit", 2, min=1, max=10, label="Scheduler Max Memory (GiB)"),
            Float("worker_cores", 1, min=1, max=8, label="Worker Cores"),
            Float("worker_memory", 4, min=1, max=32, label="Worker Memory (GiB)"),
            String("image", default="ghcr.io/rs-python/rs-infra-core-dask-gateway:latest", label="Image"),
            String("namespace", default="dask-gateway", label="Namespace"),
            Float("cluster_max_cores", 4, min=1, max=80, label="Cluster max cores"),
            Float("cluster_max_memory", default=17179869184, min=1073741824, max=343597383680, label="Cluster max memory"),
            Integer("cluster_max_workers", 5, min=1, max=20, label="Cluster max workers"),
            String("cluster_name", default="MyDaskCluster", label="Cluster Name"),
            Mapping("scheduler_extra_container_config", default={"readinessProbe":{"failureThreshold":3,"httpGet":{"path":"/api/health","port":8788,"scheme":"HTTP"},"periodSeconds":5,"successThreshold":1,"timeoutSeconds":15}, "imagePullPolicy": "Always"}, label="scheduler_extra_container_config"),
            Mapping("scheduler_extra_pod_annotations", default={"usage":"unknown","access":"internal"}, label="Scheduler_extra_pod_annotations"),
            Mapping("scheduler_extra_pod_labels", default={"user":"unknown","team":"unknown","cluster_name":"MyDaskCluster"}, label="Scheduler_extra_pod_labels"),
            Mapping("environment", default={"S3_ENDPOINT":"{{ s3.endpoint }}","S3_REGION":"{{ s3.region }}","TEMPO_ENDPOINT":"http://grafana-tempo-distributor.logging.svc.cluster.local:4317"}, label="Environment variables"),
            Mapping("worker_extra_pod_config", default={"affinity":{"nodeAffinity":{"requiredDuringSchedulingIgnoredDuringExecution":{"nodeSelectorTerms":[{"matchExpressions":[{"key":"node-role.kubernetes.io/access_csc","operator":"Exists"}]}]}}},"tolerations":[{"key":"role","operator":"Equal","value":"access_csc","effect":"NoSchedule"}]}, label="Worker_extra_pod_config"),
            Mapping("worker_extra_container_config", default={"envFrom":[{"secretRef":{"name": "obs"}}]}, label="Worker_extra_container_config"),
            handler=option_handler,
        )

  backend:
    image:
      name: ghcr.io/dask/dask-gateway
      tag: "2024.1.0"
      pullPolicy:
    imagePullSecrets:
      - name: ghcr-k8s
    namespace: dask-gateway
    scheduler:
      extraPodConfig:
        affinity:
          nodeAffinity:
            requiredDuringSchedulingIgnoredDuringExecution:
              nodeSelectorTerms:
                - matchExpressions:
                  - key: "node-role.kubernetes.io/processing"
                    operator: Exists
        tolerations:
          - key: role
            operator: Equal
            value: processing
            effect: NoSchedule

controller:
  enabled: true
  image:
    name: ghcr.io/dask/dask-gateway-server
    tag: "2024.1.0"
    pullPolicy:
  affinity: 
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: "node-role.kubernetes.io/processing"
              operator: Exists
  tolerations:
    - key: role
      operator: Equal
      value: processing
      effect: NoSchedule

traefik:
  replicas: 1
  image:
    name: traefik
    tag: "2.10.6"
    pullPolicy:
  loglevel: WARN
  service:
    type: ClusterIP
  dashboard: false
  affinity: 
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: "node-role.kubernetes.io/processing"
              operator: Exists
  tolerations:
    - key: role
      operator: Equal
      value: processing
      effect: NoSchedule
