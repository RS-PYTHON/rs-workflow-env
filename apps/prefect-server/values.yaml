# Copyright 2024 CS Group
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

## Deployment Configuration
server:
  image:
    repository: prefecthq/prefect
    prefectTag: 2.18.3-python3.11-kubernetes
    pullPolicy: IfNotPresent

  prefectApiUrl: http://localhost:4200/api

  prefectApiHost: 0.0.0.0

  uiConfig:
    enabled: true
    prefectUiUrl: ""
    prefectUiStaticDirectory: "/ui_build"

  loggingLevel: WARNING
  env:
    - name: PREFECT_LOGGING_EXTRA_LOGGERS
      value: dask,scipy
    - name: PREFECT_LOGGING_LOGGERS_PREFECT_EXTRA_LEVEL
      value: INFO
    - name: PREFECT_LOGGING_LOGGERS_PREFECT_EXTRA_HANDLERS
      value: "[api console]"
    - name: PREFECT_LOGGING_LOGGERS_PREFECT_FLOW_RUNS_LEVEL
      value: INFO
    - name: PREFECT_LOGGING_LOGGERS_PREFECT_FLOW_RUNS_HANDLERS
      value: "[api console]"
    - name: PREFECT_LOGGING_LOGGERS_PREFECT_TASK_RUNS_HANDLERS
      value: "[api console]"
    - name: PREFECT_LOGGING_LOGGERS_PREFECT_TASK_RUNS_LEVEL
      value: INFO
    - name: PREFECT_LOGGING_ROOT_LEVEL
      value: INFO

  # -- affinity for server pods assignment
  affinity:         
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
          - matchExpressions:
            - key: "node-role.kubernetes.io/infra"
              operator: Exists

  # requests MUST be specified if using an HPA, otherwise the HPA will not know when to trigger a scale event
  resources:
    # -- the requested resources for the server container
    requests:
      cpu: 500m
      memory: 512Mi
    # -- the requested limits for the server container
    limits:
      cpu: "1"
      memory: 2Gi

## Service configuration
service:
  type: ClusterIP
  port: 4200
  targetPort: 4200
  clusterIP: ""
  nodePort: ""
  externalTrafficPolicy: Cluster

# Ingress configuration
ingress:
  enabled: true
  className: "nginx"
  #path must be /
  host:
    hostname: processing.{{ platform_domain_name }}
    path: /
    pathType: Prefix

  annotations: 
    cert-manager.io/cluster-issuer: letsencrypt-prod
    nginx.ingress.kubernetes.io/backend-protocol: HTTP
    nginx.ingress.kubernetes.io/proxy-buffer-size: 32k
    nginx.ingress.kubernetes.io/auth-signin: https://oauth2-proxy.{{ platform_domain_name }}/oauth2/start?rd=https://$host
    nginx.ingress.kubernetes.io/auth-url: https://oauth2-proxy.{{ platform_domain_name }}/oauth2/auth
    nginx.ingress.kubernetes.io/auth-response-headers: Authorization

  tls: true
  # -- create a TLS secret for this ingress record using self-signed certificates generated by Helm
  selfSigned: false

  extraTls:
    - hosts:
        - processing.{{ platform_domain_name }}
      secretName: processing-{{ platform_domain_name | replace(".", "-") }}

# Postgresql configuration
postgresql:
  enabled: true
  auth:
    enablePostgresUser: false
    database: prefect
    username: {{ prefect.database.username }}
    password: {{ prefect.database.password }}
  containerPorts:
    postgresql: 5432
  externalHostname: {{ prefect.database.host }}
  useSubChart: false
  